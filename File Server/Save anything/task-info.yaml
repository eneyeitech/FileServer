type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.io.IOException;

    public class Main {
        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 23456;

        public static void main(String[] args) throws IOException {
            FileStorage fileStorage = new FileStorage();
            MyServerSocket server = new MyServerSocket(ADDRESS, PORT, fileStorage);
            server.start();
        }
    }
  learner_created: false
- name: src/server/data/123.txt
  visible: true
  text: apple
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: src/client/InputHandler.java
  visible: true
  text: |-
    package client;

    import java.io.IOException;
    import java.util.Scanner;

    public class InputHandler {
        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 23456;

        private final Scanner scanner;

        public InputHandler(Scanner scanner) {
            this.scanner = scanner;
        }

        public void process() throws IOException {
            MyClientSocket client = new MyClientSocket(ADDRESS, PORT);
            System.out.println("Client started!");

            System.out.println("Enter action (1 - get a file, 2 - create a file, 3 - delete a file):");
            String action = scanner.nextLine();
            if ("exit".equals(action)) {
                System.out.println("The request was sent.");
                client.sendRequest("exit");
                return;
            }
            System.out.println("Enter filename:");
            String fileName = scanner.nextLine();
            switch (action) {
                case "1":
                    processGetRequest(client, fileName);
                    break;
                case "2":
                    processPutRequest(client, fileName);
                    break;
                case "3":
                    processDeleteRequest(client, fileName);
                    break;
                default:
                    throw new IllegalArgumentException(action + " action is not supported");
            }
        }

        private void processGetRequest(MyClientSocket client, String fileName) throws IOException {
            String request = String.format("GET %s", fileName);
            String response = client.sendRequest(request);
            System.out.println("The request was sent.");

            int code = Integer.parseInt(response.substring(0, 3));
            if (code == 200) {
                System.out.printf("The content of the file is: %s%n", response.substring(4));
            } else if (code == 404) {
                System.out.println("The response says that the file was not found!");
            }
        }

        private void processPutRequest(MyClientSocket client, String fileName) throws IOException {
            System.out.println("Enter file content:");
            String fileContent = scanner.nextLine();
            String request = String.format("PUT %s %s", fileName, fileContent);
            String response = client.sendRequest(request);
            System.out.println("The request was sent.");

            int code = Integer.parseInt(response);
            if (code == 200) {
                System.out.println("The response says that file was created!");
            } else if (code == 403) {
                System.out.println("The response says that creating the file was forbidden!");
            }
        }

        private void processDeleteRequest(MyClientSocket client, String fileName) throws IOException {
            String request = String.format("DELETE %s", fileName);
            String response = client.sendRequest(request);
            System.out.println("The request was sent.");

            int code = Integer.parseInt(response);
            if (code == 200) {
                System.out.println("The response says that the file was successfully deleted!");
            } else if (code == 404) {
                System.out.println("The response says that the file was not found!");
            }
        }
    }
  learner_created: false
- name: src/client/MyClientSocket.java
  visible: true
  text: |-
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.nio.charset.StandardCharsets;

    public class MyClientSocket {
        private final String address;
        private final int port;

        public MyClientSocket(String address, int port) {
            this.address = address;
            this.port = port;
        }

        public String sendRequest(String request) throws IOException {
            try (
                    Socket socket = new Socket(InetAddress.getByName(address), port);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                output.writeUTF(request);
    //            output.write(request.getBytes(StandardCharsets.UTF_8));

                return new String(input.readAllBytes(), StandardCharsets.UTF_8);
    //            return input.readUTF();
            }
        }
    }
  learner_created: false
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import java.io.IOException;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) throws IOException {
            Scanner scanner = new Scanner(System.in);
            InputHandler inputHandler = new InputHandler(scanner);
            inputHandler.process();
        }
    }
  learner_created: false
- name: src/server/MyServerSocket.java
  visible: true
  text: |-
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.nio.charset.StandardCharsets;

    public class MyServerSocket {
        private static final String PUT = "PUT";
        private static final String GET = "GET";
        private static final String DELETE = "DELETE";
        private static final String SPACE = " ";

        private final String address;
        private final int port;
        private final FileStorage fileStorage;

        public MyServerSocket(String address, int port, FileStorage fileStorage) {
            this.address = address;
            this.port = port;
            this.fileStorage = fileStorage;
        }

        public void start() throws IOException {
            System.out.println("Server started!");
            while (true) {
                try (ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))) {
                    try (
                            Socket socket = server.accept();
                            DataInputStream input = new DataInputStream(socket.getInputStream());
                            DataOutputStream output = new DataOutputStream(socket.getOutputStream())
                    ) {
                        String request = input.readUTF();
    //                    String request = new String(input.readAllBytes(), StandardCharsets.UTF_8);

                        String response;
                        if (request.startsWith(PUT)) {
                            response = processPutRequest(request);
                        } else if (request.startsWith(GET)) {
                            response = processGetRequest(request);
                        } else if (request.startsWith(DELETE)) {
                            response = processDeleteRequest(request);
                        } else if ("exit".equals(request)) {
                            break;
                        } else {
                            throw new IllegalArgumentException(request + " request is not supported");
                        }

    //                    output.writeUTF(response);
                        output.write(response.getBytes(StandardCharsets.UTF_8));
                    }
                }
            }
        }

        private String processPutRequest(String request) throws IOException {
            String fileNameAndData = request.substring(PUT.length() + 1);
            String fileName = fileNameAndData.substring(0, fileNameAndData.indexOf(SPACE));
            String fileContent = fileNameAndData.substring(fileNameAndData.indexOf(SPACE) + 1);
            if (fileStorage.contains(fileName)) {
                return "403";
            }
            fileStorage.addFile(fileName, fileContent);
            return "200";
        }

        private String processGetRequest(String request) throws IOException {
            String fileName = request.substring(GET.length() + 1);
            if (fileStorage.contains(fileName)) {
                return "200 " + fileStorage.getFileContent(fileName);
            }
            return "404";
        }

        private String processDeleteRequest(String request) throws IOException {
            String fileName = request.substring(DELETE.length() + 1);
            if (fileStorage.deleteFile(fileName)) {
                return "200";
            }
            return "404";
        }
    }
  learner_created: false
- name: src/server/FileStorage.java
  visible: true
  text: |
    package server;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class FileStorage {
        Path root = Path.of(
                System.getProperty("user.dir"),
                "src", "server", "data"
        );
        //    private static final String STORAGE_FOLDER = System.getProperty("user.dir") + "/File Server/task/src/server/data/";
        private static final String STORAGE_FOLDER = System.getProperty("user.dir") +File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

       // private static final String STORAGE_FOLDER =  System.getProperty("user.dir")
          //      + File.separator + "File Server" + File.separator + "task" + File.separator
            //    + "src" + File.separator + "server" + File.separator + "data" + File.separator;


        public void addFile(String fileName, String fileContent) throws IOException {
            //Files.writeString(Path.of(STORAGE_FOLDER + fileName), fileContent);
            try {
                File file = new File(STORAGE_FOLDER + fileName);
                FileWriter myWriter = new FileWriter(file);
                myWriter.write(fileContent);
                myWriter.close();
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }

        public String getFileContent(String fileName) throws IOException {
            return new String(Files.readAllBytes(Path.of(STORAGE_FOLDER + fileName)));
        }

        public boolean deleteFile(String fileName) throws IOException {
            return Files.deleteIfExists(Path.of(STORAGE_FOLDER + fileName));
        }

        public boolean contains(String fileName) {
            return Files.exists(Path.of(STORAGE_FOLDER + fileName));
        }
    }
  learner_created: false
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName))).trim();
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/server/ClientHandler.java
  visible: true
  learner_created: true
- name: src/util/SerializationUtils.java
  visible: true
  learner_created: true
- name: src/util/Constants.java
  visible: true
  learner_created: true
- name: src/client/ClientFileStorage.java
  visible: true
  learner_created: true
- name: src/server/ResponseHandler.java
  visible: true
  learner_created: true
- name: src/util/StringGenerator.java
  visible: true
  learner_created: true
- name: src/server/data/identifiers.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/286/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 29 Apr 2022 20:11:03 UTC
record: 1
