type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            InputHandler inputHandler = new InputHandler(new Scanner(System.in));
            inputHandler.process();
        }
    }
  learner_created: false
- name: src/server/InputHandler.java
  visible: true
  text: |
    package server;

    import java.util.HashSet;
    import java.util.Scanner;
    import java.util.Set;

    public class InputHandler {
        private final Scanner scanner;
        private final Set<String> files = new HashSet<>();

        public InputHandler(Scanner scanner) {
            this.scanner = scanner;
        }

        public void process() {
            while (true) {
                String input = scanner.nextLine();
                if ("exit".equals(input)) {
                    return;
                }
                String[] commandLine = input.split(" ");
                String command = commandLine[0];
                String fileName = commandLine[1];
                switch (command) {
                    case "add":
                        boolean isAdded = false;
                        if (isCorrectFile(fileName)) {
                            isAdded = files.add(fileName);
                        }

                        if (isAdded) {
                            System.out.printf("The file %s added successfully%n", fileName);
                        } else {
                            System.out.printf("Cannot add the file %s%n", fileName);
                        }
                        break;
                    case "get":
                        String file = getFile(fileName);
                        if (file != null) {
                            System.out.printf("The file %s was sent%n", fileName);
                        } else {
                            System.out.printf("The file %s not found%n", fileName);
                        }
                        break;
                    case "delete":
                        if (files.remove(fileName)) {
                            System.out.printf("The file %s was deleted%n", fileName);
                        } else {
                            System.out.printf("The file %s not found%n", fileName);
                        }
                        break;
                    default:
                        throw new IllegalArgumentException(command + " command is not supported");
                }
            }
        }

        private String getFile(String fileName) {
            return files.stream()
                    .filter(it -> it.equals(fileName))
                    .findFirst()
                    .orElse(null);
        }

        private boolean isCorrectFile(String fileName) {
            for (int i = 1; i < 11; i++) {
                String file = "file" + i;
                if (file.equals(fileName)) {
                    return true;
                }
            }
            return false;
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/client/InputHandler.java
  visible: true
  learner_created: true
- name: src/client/MyClientSocket.java
  visible: true
  learner_created: true
- name: src/client/Main.java
  visible: true
  learner_created: true
- name: src/server/MyServerSocket.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/284/implement#comment
status: Solved
record: 3
